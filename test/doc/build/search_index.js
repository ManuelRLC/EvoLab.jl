var documenterSearchIndex = {"docs":
[{"location":"#example.jl-Documentation-1","page":"example.jl Documentation","title":"example.jl Documentation","text":"","category":"section"},{"location":"#","page":"example.jl Documentation","title":"example.jl Documentation","text":"setCrossoverOperator(method::Function, varArgs...; genj::GeneticJulia = GenJ, probability::Number = 0.7, nChildren::Int = -1)","category":"page"},{"location":"#setCrossoverOperator-Tuple{Function,Vararg{Any,N} where N}","page":"example.jl Documentation","title":"setCrossoverOperator","text":"setCrossoverOperator(method::Function, varArgs...;\n                    genj::GeneticJulia = GenJ,\n                    probability::Number = 0.7,\n                    nChildren::Int = -1)\n\nSet the crossover operator of parents for genj, receiving a function that cross multiples individual representations and return one child or multiple children.     This function constructs an structure of type CrossoverOperator and adds it to the main structure.\n\nArguments\n\nmethod::Function: function that receives, first, a list of parents as arguments which are individual representation and \"varArgs\", that is a list of arguments, as own arguments, and return a number between 1 and nParents of children, where each one is an individual representation. (For information about representation look IndividualRep). See \"Examples\".\nvarArgs: List of arguments for crossover method. See \"Examples\".\n\nKeyword Arguments\n\ngenj::GeneticJulia = GenJ: the main structure. For code user: don't modify the default value unless multiple experiments are goint to be run.\nprobability::Number = 0.7: A floating point number, between 0 and 1, that represents the probability of doing each single crossover operation.\nnChildren::Int = -1: The number of children as result of the crossover method. It must be either a number between 0 and nParents or -1 which is equal to nParents.\n\nNote\n\nThe CrossoverOperator uses the nParents variable that define the number of parents per cross and it can be set through setNParentsPerCross function. The default value is 2.\n\nExamples\n\n#Function with 2 parents, no more arguments and 1 child\nfunction ExampleCrossParents1(Parent1::IndividualRep, Parent2::IndividualRep)\n    #···Code···\n    return children::IndividualRep # Type expressed here for user awareness\nend\n\njulia> setCrossoverOperator(ExampleCrossParents1, probability = 0.4, nChildren = 1)\n\n_______________________________\n\n#Function with more than 2 parents, no more arguments and the same number of children as parents.\nfunction ExampleCrossParents2(Parent1::IndividualRep, Parent2::IndividualRep, Parent3::IndividualRep)\n    #···Code···\n    return children::Array{IndividualRep}(undef, 3) # Type expressed here for user awareness\nend\n\njulia> setCrossoverOperator(ExampleCrossParents2, probability = 0.6, nChildren = -1)\n\n________________________________\n\n#Function with more arguments and the same number of children as parents\nfunction ExampleCrossParents3(Parent1::IndividualRep, Parent2::IndividualRep, arg1, arg2)\n    #···Code···\n    return children::Array{IndividualRep}(undef, 2) # Type expressed here for user awareness\nend\n\njulia> setCrossoverOperator(ExampleCrossParents3, arg1, arg2, probability = 0.6, nChildren = -1)\n\nSee also: CrossoverOperator\n\n\n\n\n\n","category":"method"}]
}
