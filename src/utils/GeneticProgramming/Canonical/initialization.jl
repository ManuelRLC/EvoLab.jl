"""
    growGenerator(gpExperimentInfo::CGPInfo, rng::Random.AbstractRNG)

Creates a CGP tree using the \"grow\" method.

`Self-provided Arguments` are provided by the library, so only `User Arguments` must be provided.

# Self-provided Arguments
- `gpExperimentInfo::CGPInfo`: information about the GP experiment.
- `rng::Random.AbstractRNG)`: random number generator for random number consistency
    along an experiment.

# User Arguments
None

# Returns
An instance of type `CGPGenotype` created by the \"grow\" method.
"""
function growGenerator(gpExperimentInfo::CGPInfo, rng::Random.AbstractRNG)
    functionSet = gpExperimentInfo._functionSet
    terminalSet = deepcopy(gpExperimentInfo._terminalSet)
    maxDepth = gpExperimentInfo._maxTreeDepth

    function growRecursiveMethod(maxDepthAux)
        expr = Array{Node}(undef, 0)
        prob = length(terminalSet)/(length(terminalSet) + length(functionSet))

        if maxDepthAux == 0 || rand(rng) < prob
            push!(expr, rand(rng, terminalSet))
        else
            push!(expr, rand(rng, functionSet))

            arity = getArity(expr[end])

            for i = 1:arity
                append!(expr, growRecursiveMethod(maxDepthAux-1))
            end
        end

        return expr
    end # function

    return CGPGenotype(growRecursiveMethod(maxDepth))
end # function



"""
    fullGenerator(gpExperimentInfo::CGPInfo, rng::Random.AbstractRNG)

Creates a CGP tree using the \"full\" method.

`Self-provided Arguments` are provided by the library, so only `User Arguments` must be provided.

# Self-provided Arguments
- `gpExperimentInfo::CGPInfo`: information about the GP experiment.
- `rng::Random.AbstractRNG)`: random number generator for random number consistency
    along an experiment.

# User Arguments
None

# Returns
An instance of type `CGPGenotype` created by the \"full\" method.
"""
function fullGenerator(gpExperimentInfo::CGPInfo, rng::Random.AbstractRNG)
    functionSet = gpExperimentInfo._functionSet
    terminalSet = deepcopy(gpExperimentInfo._terminalSet)
    maxDepth = gpExperimentInfo._maxTreeDepth

    function fullRecursiveMethod(maxDepthAux)

        expr = Array{Node}(undef, 0)

        if maxDepthAux == 0
            push!(expr, rand(rng, terminalSet))
        else

            push!(expr, rand(rng, functionSet))

            arity = getArity(expr[end])

            for i = 1:arity
                append!(expr, fullRecursiveMethod(maxDepthAux-1))
            end
        end

        return expr
    end # function

    return CGPGenotype(fullRecursiveMethod(maxDepth))
end # function



"""
    rampedHalfHalfGenerator(gpExperimentInfo::CGPInfo, popSize::Integer,
                            rng::Random.AbstractRNG, RHHFactor::AbstractFloat = 0.5)

Initializes a population for a GP problem by the \"ramped half and half\" method,
which creates part of it using the full method, and the other part using the grow
method.

!!! note
    `Self-provided Arguments` are provided by the library, so only `User Arguments` must be provided.

# Self-provided Arguments
- `gpExperimentInfo::CGPInfo`: information about the GP experiment.
- `popSize::Integer`: size of the population that is going to be created, that is
    to say, the number of individuals of the population.
- `rng::Random.AbstractRNG`: random number generator for random number consistency
    along an experiment.

# User arguments
- `RHHFactor::AbstractFloat = 0.5`: percentage of the population that is going to
    be created by the \"full\" method, the remaining percentage will be created by
    the \"grow\" method.

# Returns
A population of GP individuals generated by the \"ramped half and half\" method.
"""
function rampedHalfHalfGenerator(gpExperimentInfo::CGPInfo, popSize::UInt32,
                                 rng::Random.AbstractRNG, RHHFactor::Float64 = 0.5)

    population = Array{CGPGenotype}(undef, popSize)
    N = popSize - round(Integer, popSize * RHHFactor)

    for i = 1:(popSize-N)
        population[i] = fullGenerator(gpExperimentInfo, rng)
    end

    for i = (popSize-N+1):popSize
        population[i] = growGenerator(gpExperimentInfo, rng)
    end

    return Random.shuffle(rng, population)
end # function
println(precompile(rampedHalfHalfGenerator, tuple(CGPInfo,UInt32,
                                 Random.MersenneTwister, Float64)))
println(precompile(rampedHalfHalfGenerator, tuple(CGPInfo,UInt32,
                              Random._GLOBAL_RNG, Float64)))
